= Quiz app aplication with microservices

This documentation was developed as part of a programming activity for the <em>Software Design and Architecture</em> course (_Tc3049_), at the Tecnológico de Monterrey, Campus Estado de México.

== Authors

* *A01748931* <em>Bruno Omar Jimenez Mancilla</em>
* *A01748559* <em>Roberto Castro Barrios</em>

== Directory Structure
    ProyectoArquitecturaSoftware/
              ├─ doc/                        Folder produced by RDoc.
              └─ src/                        Folder for the application’s source code.
                   └─ views/                 Folder for the application’s views (ERB files).
== Installing and Running the Application

To run these project you need Ruby 2.6 or better the {Sinatra}[http://www.sinatrarb.com/] gem installed and the Faraday {Faraday}[https://lostisland.github.io/faraday/] gem. To run the server type the following command at the terminal from the +ProyectoArquitecturaSoftware/src+ directory:

    $ ruby -I . -w WebServer.rb

Then use a web browser to visualize the application with the servers´s URL.

== Overview

For this program we use the <b>4 + 1 View Model</b> which consists of seeing the application in 4 view and some use cases scenarios. 

=== Logical View

The logical view contains information about the various parts of the system. In UML the logical view is typically modeled using <em>class diagrams</em>.

For example, the following figure represents the UML class diagram for the +Greeter+ model and its factory class:

You can include as many of these diagrams as you consider necessary. Note that you only need to specify the names of the classes and their relationships. Don’t include attributes or method names in these diagrams.

To include an image in this document, copy it to the +img+ directory and refer it as: +rdoc-image:img/some_image.png+. You can use any web supported image format (PNG, JPEG, GIF, etc.).

=== Process View

The process view focuses on the runtime behavior of the system. In UML, <em>activity diagrams</em> are used to model this view.

=== Development View

The development view focuses on software modules and subsystems. In UML, <em>package diagrams</em> are used to model the development view.

=== Physical View

The physical view describes the physical deployment of the system, revealing which pieces of software run on what pieces of hardware. In UML, <em>deployment diagrams</em> are used to model the physical view.

=== Scenarios

This view describes the functionality of the system from the perspective from outside world. It contains diagrams describing what the system is supposed to do from a black box perspective. UML <em>use case diagrams</em> are used for this view.

== References
- \A. Ortiz. <em>ArielOrtiz.info</em> {https://arielortiz.info/apps/s202213/tc3049/programming_microservices/}[https://arielortiz.info/apps/s202213/tc3049/programming_microservices/] Accesed November 10, 2022.

- Sinatra. <em>Sinatra Docs</em> {https://sinatrarb.com}[https://sinatrarb.com] Accessed November 12, 2022.

- Bootstrap. <em>Bootstrap Docs</em> {https://getbootstrap.com}[https://getbootstrap.com] Accessed November 12, 2022.

- Medium. <em>4+1 Architectural view model in Software</em> {https://medium.com/javarevisited/4-1-architectural-view-model-in-software-ec407bf27258}[https://medium.com/javarevisited/4-1-architectural-view-model-in-software-ec407bf27258] Accessed November 13, 2022.

- GeeksForGeeks. <em>Ruby | Array sample() function</em> {https://www.geeksforgeeks.org/ruby-array-sample-function/}[https://www.geeksforgeeks.org/ruby-array-sample-function/] Accessed November 13, 2022.

- GeeksForGeeks. <em>Ruby – String split() Method with Examples</em> {https://www.geeksforgeeks.org/ruby-string-split-method-with-examples/}[https://www.geeksforgeeks.org/ruby-string-split-method-with-examples/] Accessed November 13, 2022.
